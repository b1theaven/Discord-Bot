// src/structures/prodia.ts
var Prodia = (api_key) => {
  const base = "https://api.prodia.com/v1";
  const headers = {
    "accept": "application/json",
    "content-type": "application/json",
    "X-Prodia-Key": api_key
  };
  const sendRequest = async (params) => {
    const res = await fetch(`${base}${params.endpoint}`, {
      method: params.method,
      headers,
      body: JSON.stringify(params.body)
    });
    if (res.status === 400) {
      throw new Error("The provided parameters are invalid.");
    } else if (res.status === 401) {
      throw new Error("The provided API key is invalid.");
    } else if (res.status === 402) {
      throw new Error("The API key is not enabled.");
    } else if (res.status === 200) {
      return await res.json();
    } else {
      throw new Error("Failed to receive a valid response.");
    }
  };
  const generateImage = async (params) => {
    const response = await sendRequest({
      endpoint: "/sd/generate",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const transform = async (params) => {
    const response = await sendRequest({
      endpoint: "/sd/transform",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const inpainting = async (params) => {
    const response = await sendRequest({
      endpoint: "/sd/inpaint",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const controlNet = async (param) => {
    const response = await sendRequest({
      endpoint: "/sd/controlnet",
      method: "POST",
      body: param
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const generateImageSDXL = async (params) => {
    const response = await sendRequest({
      endpoint: "/sdxl/generate",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const transformSDXL = async (params) => {
    const response = await sendRequest({
      endpoint: "/sdxl/transform",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const inpaintingSDXL = async (params) => {
    const response = await sendRequest({
      endpoint: "/sdxl/inpaint",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const upscale = async (params) => {
    const response = await sendRequest({
      endpoint: "/upscale",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const faceSwap = async (params) => {
    const response = await sendRequest({
      endpoint: "/faceswap",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const faceRestore = async (params) => {
    const response = await sendRequest({
      endpoint: "/facerestore",
      method: "POST",
      body: params
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getJob = async (job_id) => {
    const response = await sendRequest({
      endpoint: `/job/${job_id}`,
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getModels = async () => {
    const response = await sendRequest({
      endpoint: "/sd/models",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getSDXLModels = async () => {
    const response = await sendRequest({
      endpoint: "/sdxl/models",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getSamplers = async () => {
    const response = await sendRequest({
      endpoint: "/sd/samplers",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getSDXLSamplers = async () => {
    const response = await sendRequest({
      endpoint: "/sdxl/samplers",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getLoras = async () => {
    const response = await sendRequest({
      endpoint: "/sd/loras",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getSDXLLoras = async () => {
    const response = await sendRequest({
      endpoint: "/sdxl/loras",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getEmbeddings = async () => {
    const response = await sendRequest({
      endpoint: "/sd/embeddings",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const getSDXLEmbeddings = async () => {
    const response = await sendRequest({
      endpoint: "/sdxl/embeddings",
      method: "GET"
    });
    if (!response) {
      throw new Error("Failed to receive a valid response.");
    }
    return response;
  };
  const wait = async (job) => {
    let res = job;
    while (res.status !== "succeeded") {
      await new Promise((resolve) => setTimeout(resolve, 250));
      if (res.status === "failed") {
        throw new Error("Failed to generate image.");
      }
      res = await getJob(job.job);
    }
    return res;
  };
  return {
    generateImage,
    transform,
    inpainting,
    controlNet,
    generateImageSDXL,
    transformSDXL,
    inpaintingSDXL,
    upscale,
    faceSwap,
    faceRestore,
    getJob,
    getModels,
    getSDXLModels,
    getSamplers,
    getSDXLSamplers,
    getLoras,
    getSDXLLoras,
    getEmbeddings,
    getSDXLEmbeddings,
    wait
  };
};
export {
  Prodia
};
